//go:build generate

// Package main contains code generators for the go-qbittorrent project.
// This generator creates type-safe field update methods for sync operations.
package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"regexp"
	"strings"
)

type FieldInfo struct {
	Name    string
	JSONTag string
	Type    string
	GoType  string
}

type StructInfo struct {
	Name   string
	Fields []FieldInfo
}

func main() {
	// Parse the domain.go file to extract all sync-related structs
	fset := token.NewFileSet()
	domainFile := "domain.go"
	file, err := parser.ParseFile(fset, domainFile, nil, parser.ParseComments)
	if err != nil {
		log.Fatal(err)
	}

	// Structs that are involved in sync operations
	syncStructs := []string{"Torrent", "ServerState", "Category", "TorrentTracker"}
	var structs []StructInfo

	// Find all the sync-related structs
	ast.Inspect(file, func(n ast.Node) bool {
		if ts, ok := n.(*ast.TypeSpec); ok {
			for _, structName := range syncStructs {
				if ts.Name.Name == structName {
					if st, ok := ts.Type.(*ast.StructType); ok {
						fields := parseStructFields(st)
						if len(fields) > 0 {
							structs = append(structs, StructInfo{
								Name:   structName,
								Fields: fields,
							})
						}
					}
				}
			}
		}
		return true
	})

	if len(structs) == 0 {
		log.Fatal("Could not find any sync-related structs")
	}

	// Create output file in the project root
	outputFile := "maindata_updaters_generated.go"
	outFile, err := os.Create(outputFile)
	if err != nil {
		log.Fatal(err)
	}
	defer outFile.Close()

	// Redirect stdout to file
	oldStdout := os.Stdout
	os.Stdout = outFile

	generateAllUpdaters(structs)

	// Restore stdout
	os.Stdout = oldStdout

	fmt.Printf("Generated %s with %d struct updaters\n", outputFile, len(structs))
}

func parseStructFields(st *ast.StructType) []FieldInfo {
	var fields []FieldInfo

	for _, field := range st.Fields.List {
		if field.Names == nil {
			continue // Skip embedded fields
		}

		fieldName := field.Names[0].Name
		fieldType := getFieldType(field.Type)

		// Extract JSON tag
		jsonTag := ""
		if field.Tag != nil {
			tag := field.Tag.Value
			// Use regex to extract json tag value
			re := regexp.MustCompile(`json:"([^"]*)"`)
			matches := re.FindStringSubmatch(tag)
			if len(matches) > 1 {
				jsonTagValue := matches[1]
				// Handle omitempty and other options
				if parts := strings.Split(jsonTagValue, ","); len(parts) > 0 {
					jsonTag = parts[0]
				}
			}
		}

		if jsonTag != "" && jsonTag != "-" {
			fields = append(fields, FieldInfo{
				Name:    fieldName,
				JSONTag: jsonTag,
				Type:    fieldType,
				GoType:  getGoType(field.Type),
			})
		}
	}

	return fields
}

func getFieldType(expr ast.Expr) string {
	switch t := expr.(type) {
	case *ast.Ident:
		return t.Name
	case *ast.SelectorExpr:
		if ident, ok := t.X.(*ast.Ident); ok {
			return ident.Name + "." + t.Sel.Name
		}
	case *ast.ArrayType:
		return "[]" + getFieldType(t.Elt)
	case *ast.MapType:
		return "map[" + getFieldType(t.Key) + "]" + getFieldType(t.Value)
	}
	return "unknown"
}

func getGoType(expr ast.Expr) string {
	switch t := expr.(type) {
	case *ast.Ident:
		return t.Name
	case *ast.SelectorExpr:
		if ident, ok := t.X.(*ast.Ident); ok {
			return ident.Name + "." + t.Sel.Name
		}
	case *ast.ArrayType:
		return "[]" + getGoType(t.Elt)
	case *ast.MapType:
		return "map[" + getGoType(t.Key) + "]" + getGoType(t.Value)
	}
	return "interface{}"
}

func generateAllUpdaters(structs []StructInfo) {
	fmt.Println("// Code generated by go generate; DO NOT EDIT.")
	fmt.Println("// Generated by: internal/codegen/generate_maindata_updaters.go")
	fmt.Println()
	fmt.Println("package qbittorrent")
	fmt.Println()

	for _, structInfo := range structs {
		generateStructUpdater(structInfo)
		fmt.Println()
	}
}

func generateStructUpdater(structInfo StructInfo) {
	structName := structInfo.Name
	methodName := fmt.Sprintf("update%sFields", structName)

	fmt.Printf("// %s updates only the fields that are present in the update map\n", methodName)
	fmt.Printf("func (dest *MainData) %s(obj *%s, updateMap map[string]interface{}) {\n", methodName, structName)
	fmt.Println("\t// Only update fields that are explicitly present in the JSON")

	for _, field := range structInfo.Fields {
		generateFieldUpdate(structName, field)
	}

	fmt.Println("}")
}

func generateFieldUpdate(structName string, field FieldInfo) {
	jsonKey := field.JSONTag
	goType := field.GoType

	fmt.Printf("\tif val, exists := updateMap[%q]; exists {\n", jsonKey)

	switch goType {
	case "string":
		fmt.Printf("\t\tif %s, ok := val.(string); ok {\n", strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t\tobj.%s = %s\n", field.Name, strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t}\n")
	case "int64":
		fmt.Printf("\t\tif %s, ok := val.(float64); ok {\n", strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t\tobj.%s = int64(%s)\n", field.Name, strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t}\n")
	case "int":
		fmt.Printf("\t\tif %s, ok := val.(float64); ok {\n", strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t\tobj.%s = int(%s)\n", field.Name, strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t}\n")
	case "float64":
		fmt.Printf("\t\tif %s, ok := val.(float64); ok {\n", strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t\tobj.%s = %s\n", field.Name, strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t}\n")
	case "float32":
		fmt.Printf("\t\tif %s, ok := val.(float64); ok {\n", strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t\tobj.%s = float32(%s)\n", field.Name, strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t}\n")
	case "bool":
		fmt.Printf("\t\tif %s, ok := val.(bool); ok {\n", strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t\tobj.%s = %s\n", field.Name, strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t}\n")
	case "TorrentState":
		fmt.Printf("\t\tif %s, ok := val.(string); ok {\n", strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t\tobj.%s = TorrentState(%s)\n", field.Name, strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t}\n")
	case "TrackerStatus":
		// TrackerStatus is an int-based enum
		fmt.Printf("\t\tif %s, ok := val.(float64); ok {\n", strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t\tobj.%s = TrackerStatus(int(%s))\n", field.Name, strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t}\n")
	case "[]TorrentTracker":
		// Handle slice of TorrentTracker with recursive update logic
		fmt.Printf("\t\tif %s, ok := val.([]interface{}); ok {\n", strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t\tvar trackers []TorrentTracker\n")
		fmt.Printf("\t\t\tfor _, item := range %s {\n", strings.ToLower(field.Name[:1]))
		fmt.Printf("\t\t\t\tif trackerMap, ok := item.(map[string]interface{}); ok {\n")
		fmt.Printf("\t\t\t\t\tvar tracker TorrentTracker\n")
		fmt.Printf("\t\t\t\t\tdest.updateTorrentTrackerFields(&tracker, trackerMap)\n")
		fmt.Printf("\t\t\t\t\ttrackers = append(trackers, tracker)\n")
		fmt.Printf("\t\t\t\t}\n")
		fmt.Printf("\t\t\t}\n")
		fmt.Printf("\t\t\tobj.%s = trackers\n", field.Name)
		fmt.Printf("\t\t}\n")
	default:
		// Panic on any unhandled type to ensure we handle all types properly
		log.Fatalf("Unhandled type: %s for field %s - add proper handling", goType, structName+"."+field.Name)
	}

	fmt.Printf("\t}\n")
}
